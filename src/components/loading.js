import React, { useEffect } from 'react';
import anime from 'animejs';
import './styles/loading.scss';

function Loading() {
  useEffect(() => {
    const tl = anime.timeline({easing: 'linear'}),
      pathA = "M366 146.5C366 209.356 279.964 265 210.5 265C175.308 265 103.341 276.9 44.9998 224C-11.8151 172.484 1.5002 146.511 1.5002 115.5C1.5002 52.6444 107.536 42.5 177 42.5C210.33 42.5 280.127 -21.6329 313 9.5C348.638 43.2517 366 113.804 366 146.5Z",
      pathB = "M375.53 204.104C375.53 266.959 290.193 374 220.73 374C185.537 374 109.009 326.558 50.6677 273.659C-6.14722 222.143 0.797815 146.524 0.797815 115.512C0.797815 52.6569 81.497 0.00016411 150.961 0.00016411C184.291 0.00016411 302.322 -0.346209 335.195 30.7867C370.833 64.5384 375.53 171.407 375.53 204.104Z";

    // Morph animation into logo
    tl.add({
      targets: ['.loading-morph'],
      opacity: [0, 1],
      duration: 1000
    })
    .add({
      targets: '.loading-morph path',
      d: [{value: pathA}, 
          {value: pathB}],
      easing: 'easeInOutSine',
      duration: 3000,
    }, '-=1000')
    .add({
      targets: '.loading-text path',
      strokeDashoffset: [anime.setDashoffset, 0],
      duration: 2000,
      delay: function(el, i) {return i * 1000},
      easing: 'easeInOutQuad',
      direction: 'alternate',
      loop: true
    }, '-=2500')
    .add({
      targets: '.loading-text',
      fill: '#EFEBE9',
      duration: 500
    })
    .add({
      targets: '.loading-wrapper',
      opacity: [1, 0],
      duration: 1000,
    }, '+=250')
  })
  return (
    <div id="loading">
      <div className="loading-wrapper">
        <svg className="loading-morph" width="383" height="378" viewBox="0 0 383 378" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M367.5 233C367.5 295.856 264.463 257 195 257C159.807 257 83.8417 371.9 25.5001 319C-31.3149 267.484 25.5003 125.511 25.5003 94.5C25.5003 31.6444 144.036 0 213.5 0C246.83 0 287.627 29.3671 320.5 60.5C356.138 94.2517 367.5 200.304 367.5 233Z" fill="url(#grad3)"/>
          <defs>
            <linearGradient id="grad3" x1="0%" y1="0%" x2="0%" y2="100%">
              <stop offset="0%" style={{stopColor: '#FF7B89', stopOpacity:'1'}} />
              <stop offset="100%" style={{stopColor: '#6F5F90', stopOpacity:'1'}} />
            </linearGradient>
          </defs>
        </svg>
        <svg className="loading-text" width="246" height="148" viewBox="0 0 246 148" fill="transparent" xmlns="http://www.w3.org/2000/svg">
          <path d="M0.944078 135.936L8.14408 119.52C13.5201 122.208 19.3761 124.512 25.7121 126.432C32.2401 128.352 38.9601 129.312 45.8721 129.312C56.2401 129.312 64.4961 127.488 70.6401 123.84C76.9761 120.192 80.1441 115.104 80.1441 108.576C80.1441 102.432 76.6881 97.152 69.7761 92.736C63.0561 88.32 54.9921 84.576 45.5841 81.504C38.2881 79.008 31.0881 76.032 23.9841 72.576C17.0721 68.928 11.3121 64.512 6.70408 59.328C2.28808 53.952 0.0800781 47.52 0.0800781 40.032C0.0800781 27.744 4.68808 18.144 13.9041 11.232C23.3121 4.12799 36.0801 0.575989 52.2081 0.575989C56.0481 0.575989 60.6561 1.05599 66.0321 2.01599C71.6001 2.97599 76.9761 4.41599 82.1601 6.336C87.5361 8.256 92.0481 10.464 95.6961 12.96L88.4961 28.512C83.8881 26.4 78.6081 24.288 72.6561 22.176C66.7041 20.064 59.6961 19.008 51.6321 19.008C42.9921 19.008 35.8881 20.928 30.3201 24.768C24.9441 28.608 22.2561 33.408 22.2561 39.168C22.2561 44.544 25.3281 49.056 31.4721 52.704C37.8081 56.352 45.5841 59.712 54.8001 62.784C62.2881 65.664 69.5841 69.12 76.6881 73.152C83.9841 76.992 89.9361 81.792 94.5441 87.552C99.3441 93.12 101.744 99.648 101.744 107.136C101.744 119.808 96.9441 129.792 87.3441 137.088C77.7441 144.192 63.8241 147.744 45.5841 147.744C41.7441 147.744 37.0401 147.264 31.4721 146.304C25.9041 145.536 20.3361 144.288 14.7681 142.56C9.20008 140.64 4.59208 138.432 0.944078 135.936Z" stroke="#D5D3E0" strokeWidth="2" strokeLinecap="round"/>
          <path d="M245.146 77.76H143.77C144.154 87.552 146.074 96.288 149.53 103.968C152.986 111.648 158.266 117.696 165.37 122.112C172.474 126.528 181.786 128.736 193.306 128.736C201.37 128.736 208.666 127.68 215.194 125.568C221.722 123.264 228.73 120.288 236.218 116.64L243.418 133.344C236.506 137.184 229.018 140.544 220.954 143.424C213.082 146.112 203.962 147.456 193.594 147.456C177.274 147.456 163.642 144.384 152.698 138.24C141.946 131.904 133.882 123.264 128.506 112.32C123.13 101.184 120.442 88.32 120.442 73.728C120.442 59.52 122.938 46.944 127.93 36C133.114 24.864 140.506 16.224 150.106 10.08C159.898 3.74399 171.706 0.575989 185.53 0.575989C199.546 0.575989 210.874 3.93599 219.514 10.656C228.346 17.376 234.778 26.4 238.81 37.728C243.034 49.056 245.146 61.632 245.146 75.456V77.76ZM144.346 62.208H222.682C221.146 49.536 217.402 39.36 211.45 31.68C205.69 23.808 196.762 19.872 184.666 19.872C172.186 19.872 162.682 23.808 156.154 31.68C149.626 39.552 145.69 49.728 144.346 62.208Z" stroke="#D5D3E0" strokeWidth="2" strokeLinecap="round" />
        </svg>
      </div>
    </div>
  )
}

export default Loading;